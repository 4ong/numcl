

(in-package :cl-user)

(deftype check (tag &environment env)
  (format t "~&~5a : ~a" tag (if env t nil))
  t)

(defun f (a b c)
  (declare (type (check :f1)))
  (declare (type (check :f2) a))
  (declare (type fixnum b))
  (let ((d 0))
    (declare (type fixnum d))
    (declare (type (check f3) b))
    (print (list a b c d))
    a))

(deftype check2 (tag &environment env)
  (break)
  (format t "~&~5a : ~a" tag (if env t nil))
  t)

(defun f (a b c)
  (declare (type (check2 :f1)))
  (declare (type (check2 :f2) a))
  (declare (type fixnum b))
  (let ((d 0))
    (declare (type fixnum d))
    (declare (type (check2 f3) b))
    (print (list a b c d))
    a))



;; (deftype element-type-of (variable &environment env)
;;   (match (cdr (assoc 'type (nth-value 2 (cltl2:variable-information variable env))))
;;     ((type-r:array-subtype element-type)
;;      element-type)
;;     (_
;;      t)))
;; 
;; (defun g (a b)
;;   (declare (type (array fixnum) a)) ; assume this declaration is generated by macro
;;   (declare (type (element-type-of a) b))
;;   a)



(in-package :numcl.impl)

(deftype check (tag &environment env)
  (format t "~&~5a : ~a" tag (if env t nil))
  t)

(defun f (a b c)
  (declare (type (check :f1)))
  (declare (type (check :f2) a))
  (declare (type fixnum b))
  (let ((d 0))
    (declare (type fixnum d))
    (declare (type (check f3) b))
    (print (list a b c d))
    a))
